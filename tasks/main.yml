---
# - name: OS-specific variables
#   include_vars: "{{ ansible_os_family }}.yml"

- name: Include collector definitions
  include_vars: "collector_definitions.yml"

- name: Check if diamond is installed
  stat: path={{diamond_conf_basepath}}/diamond.conf
  register: checkdiamondconffile

- name: Check if diamond is running
  shell: pgrep diamond
  register: checkdiamondprocess
  ignore_errors: true

# Install distribution packages that we need
- name: Install required devtools for building (apt)
  apt: pkg={{item}} state=latest
  with_items:
    - make
    - pbuilder
    - python-mock
    - python-configobj
    - python-support
    - python-psutil
    - cdbs
    - git
  when: ansible_os_family == 'Debian'

- name: Install required devtools for building (yum)
  yum: name={{item}} state=present
  with_items:
    - gcc
    - rpm-build
    - python-mock
    - python-configobj
    - git
  when: ansible_os_family == 'RedHat'

- name: Install required devtools for building (brew)
  homebrew: name={{item}} state=latest
  with_items:
    - python
    - git
  when: ansible_os_family == 'Darwin'

- name: ssh-keyscan the git server
  sudo: no
  shell: ssh-keyscan -H github.com >> ~/.ssh/known_hosts 2>&1

- name: Checkout url from gitrepo
  sudo: no
  git: repo={{diamond_git_repo_url}} dest=~/Diamond force=yes
  register: diamondrepo_status

# Once again, build according to platform
- name: Build Diamond from source
  sudo: no
  command: make builddeb
  args:
    chdir: ~/Diamond
  when: ansible_os_family == 'Debian' and not checkdiamondconffile.stat.exists and checkdiamondprocess|failed
- name: Locate built deb file of Diamond
  sudo: no
  shell: ls -1 ~/Diamond/build/diamond_*_all.deb
  register: diamonddebfile
  when: ansible_os_family == 'Debian' and not checkdiamondconffile.stat.exists and checkdiamondprocess|failed
- name: Install diamond deb package
  apt: deb={{item}} state=installed
  with_items: diamonddebfile.stdout_lines
  when: ansible_os_family == 'Debian' and not checkdiamondconffile.stat.exists and checkdiamondprocess|failed

- name: Build Diamond from source
  sudo: no
  command: make buildrpm
  args:
    chdir: ~/Diamond
  when: ansible_os_family == 'RedHat' and not checkdiamondconffile.stat.exists and checkdiamondprocess|failed
- name: Locate built rpm file of Diamond
  sudo: no
  shell: ls -1 ~/Diamond/dist/diamond-*noarch.rpm
  register: diamondrpmfile
  when: ansible_os_family == 'RedHat' and not checkdiamondconffile.stat.exists and checkdiamondprocess|failed
- name: Install diamond rpm package
  yum: name={{item}} state=present
  with_items: diamondrpmfile.stdout_lines
  when: ansible_os_family == 'RedHat' and not checkdiamondconffile.stat.exists and checkdiamondprocess|failed

- name: Build Diamond from source
  sudo: no
  command: make install DESTDIR=/usr/local
  args:
    chdir: ~/Diamond
  when: ansible_os_family == 'Darwin' and not checkdiamondconffile.stat.exists and checkdiamondprocess|failed

- name: Install influxdb python client
  sudo: yes
  command: pip install influxdb

# Common for both OS's
- name: Update diamond.conf with latest template content
  template: src=diamond.conf dest="{{diamond_conf_basepath}}/" backup=yes
  register: diamondconffilestate

- name: Configuring collector {{item.key}}
  template: src=diamondcollectorconf.j2 dest="{{collector_conf_path}}/{{item.key}}.conf"
  with_dict: diamond_collector_default_defs
  register: defaultdiamondcollectorsstate

- name: Restart diamond if config has changed
  service: name=diamond state=restarted
  when: defaultdiamondcollectorsstate.changed or diamondconffilestate.changed or checkdiamondprocess|failed
  ignore_errors: yes
